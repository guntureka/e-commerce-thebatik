datasource db {
  provider = "mongodb"

  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum TransactionStatus {
  DECLINE
  SUCCESS
  PROCESS
  NONE
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  address       String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  wishlists    Wishlist[]
  carts        Cart[]
  transactions Transaction[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// model Address {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//    name       String
//   street     String
//   city       String
//   province   String
//   country    String
//   postalCode String
//   isUse      Boolean @default(false)
//   // User       User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   // userId     String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String?
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String?
  description      String?
  discount         Float?
  price            Float
  quantity         Int
  sizes            String[]
  colors           String[]
  images           String[]
  wishlists        Wishlist[]
  carts            Cart[]
  transactionItems TransactionItem[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @db.ObjectId
  total            Float
  status           TransactionStatus @default(NONE)
  transactionItems TransactionItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int?

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId String      @db.ObjectId

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
